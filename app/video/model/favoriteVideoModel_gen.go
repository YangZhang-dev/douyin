// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	favoriteVideoFieldNames          = builder.RawFieldNames(&FavoriteVideo{})
	favoriteVideoRows                = strings.Join(favoriteVideoFieldNames, ",")
	favoriteVideoRowsExpectAutoSet   = strings.Join(stringx.Remove(favoriteVideoFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	favoriteVideoRowsWithPlaceHolder = strings.Join(stringx.Remove(favoriteVideoFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheFavoriteVideoIdPrefix         = "cache:favoriteVideo:id:"
	cacheFavoritUserIdAndVideoIdPrefix = "cache:follow:userIdAndVideoId:"
)

type (
	favoriteVideoModel interface {
		Insert(ctx context.Context, session sqlx.Session, data *FavoriteVideo) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*FavoriteVideo, error)
		FindOneByUserIdAndVideoId(ctx context.Context, userId, videoId int64) (*FavoriteVideo, error)
		Update(ctx context.Context, session sqlx.Session, data *FavoriteVideo) (sql.Result, error)
		Delete(ctx context.Context, session sqlx.Session, id int64) error
		DeleteByUserIdAndVideoId(ctx context.Context, session sqlx.Session, userId, videoId int64) error
	}

	defaultFavoriteVideoModel struct {
		sqlc.CachedConn
		table string
	}

	FavoriteVideo struct {
		Id         int64     `db:"id"`          // 点赞id
		UserId     int64     `db:"user_id"`     // 点赞用户id
		VideoId    int64     `db:"video_id"`    // 视频id
		CreateTime time.Time `db:"create_time"` // 鍒涘缓鏃堕棿
		UpdateTime time.Time `db:"update_time"` // 更新时间
	}
)

func newFavoriteVideoModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultFavoriteVideoModel {
	return &defaultFavoriteVideoModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`favorite_video`",
	}
}

func (m *defaultFavoriteVideoModel) Insert(ctx context.Context, session sqlx.Session, data *FavoriteVideo) (sql.Result, error) {
	favoriteIdKey := fmt.Sprintf("%s%v%v", cacheFavoritUserIdAndVideoIdPrefix, data.UserId, data.VideoId)
	return m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, favoriteVideoRowsExpectAutoSet)
		if session != nil {
			return session.ExecCtx(ctx, query, data.UserId, data.VideoId)
		}
		return conn.ExecCtx(ctx, query, data.UserId, data.VideoId)
	}, favoriteIdKey)
}

func (m *defaultFavoriteVideoModel) FindOne(ctx context.Context, id int64) (*FavoriteVideo, error) {
	favoriteVideoIdKey := fmt.Sprintf("%s%v", cacheFavoriteVideoIdPrefix, id)
	var resp FavoriteVideo
	err := m.QueryRowCtx(ctx, &resp, favoriteVideoIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ?  limit 1", favoriteVideoRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}
func (m *defaultFavoriteVideoModel) FindOneByUserIdAndVideoId(ctx context.Context, userId, videoId int64) (*FavoriteVideo, error) {
	favoriteIdKey := fmt.Sprintf("%s%v%v", cacheFavoritUserIdAndVideoIdPrefix, userId, videoId)
	var resp FavoriteVideo
	err := m.QueryRowCtx(ctx, &resp, favoriteIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `user_id` = ? and `video_id` = ?  limit 1", favoriteVideoRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, userId, videoId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}
func (m *defaultFavoriteVideoModel) Update(ctx context.Context, session sqlx.Session, data *FavoriteVideo) (sql.Result, error) {
	favoriteVideoIdKey := fmt.Sprintf("%s%v", cacheFavoriteVideoIdPrefix, data.Id)
	return m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, favoriteVideoRowsWithPlaceHolder)
		if session != nil {
			return session.ExecCtx(ctx, query, data.UserId, data.VideoId, data.Id)
		}
		return conn.ExecCtx(ctx, query, data.UserId, data.VideoId, data.Id)
	}, favoriteVideoIdKey)
}

func (m *defaultFavoriteVideoModel) Delete(ctx context.Context, session sqlx.Session, id int64) error {
	favoriteVideoIdKey := fmt.Sprintf("%s%v", cacheFavoriteVideoIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		if session != nil {
			return session.ExecCtx(ctx, query, id)
		}
		return conn.ExecCtx(ctx, query, id)
	}, favoriteVideoIdKey)
	return err
}
func (m *defaultFavoriteVideoModel) DeleteByUserIdAndVideoId(ctx context.Context, session sqlx.Session, userId, videoId int64) error {
	favoriteIdKey := fmt.Sprintf("%s%v%v", cacheFavoritUserIdAndVideoIdPrefix, userId, videoId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `user_id` = ? and `video_id` = ?", m.table)
		if session != nil {
			return session.ExecCtx(ctx, query, userId, videoId)
		}
		return conn.ExecCtx(ctx, query, userId, videoId)
	}, favoriteIdKey)
	return err
}

func (m *defaultFavoriteVideoModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheFavoriteVideoIdPrefix, primary)
}
func (m *defaultFavoriteVideoModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ?  limit 1", favoriteVideoRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultFavoriteVideoModel) tableName() string {
	return m.table
}
