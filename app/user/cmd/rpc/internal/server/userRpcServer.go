// Code generated by goctl. DO NOT EDIT.
// Source: userRpc.proto

package server

import (
	"context"

	"douyin/app/user/cmd/rpc/internal/logic"
	"douyin/app/user/cmd/rpc/internal/svc"
	"douyin/app/user/cmd/rpc/pb"
)

type UserRpcServer struct {
	svcCtx *svc.ServiceContext
	pb.UnimplementedUserRpcServer
}

func NewUserRpcServer(svcCtx *svc.ServiceContext) *UserRpcServer {
	return &UserRpcServer{
		svcCtx: svcCtx,
	}
}

// --------------------------------user--------------------------------
func (s *UserRpcServer) Register(ctx context.Context, in *pb.RegisterReq) (*pb.RegisterResp, error) {
	l := logic.NewRegisterLogic(ctx, s.svcCtx)
	return l.Register(in)
}

// 用户登录
func (s *UserRpcServer) Login(ctx context.Context, in *pb.LoginReq) (*pb.LoginResp, error) {
	l := logic.NewLoginLogic(ctx, s.svcCtx)
	return l.Login(in)
}

// 批量获取用户信息
func (s *UserRpcServer) GetUserListByIds(ctx context.Context, in *pb.GetUserListByIdsReq) (*pb.GetUserListByIdsResp, error) {
	l := logic.NewGetUserListByIdsLogic(ctx, s.svcCtx)
	return l.GetUserListByIds(in)
}

// 获取Token
func (s *UserRpcServer) GenerateToken(ctx context.Context, in *pb.GenerateTokenReq) (*pb.GenerateTokenResp, error) {
	l := logic.NewGenerateTokenLogic(ctx, s.svcCtx)
	return l.GenerateToken(in)
}

// --------------------------------follow--------------------------------
func (s *UserRpcServer) GetFollowInfo(ctx context.Context, in *pb.GetFollowInfoReq) (*pb.GetFollowInfoResp, error) {
	l := logic.NewGetFollowInfoLogic(ctx, s.svcCtx)
	return l.GetFollowInfo(in)
}

// 获取关注列表
func (s *UserRpcServer) GetFollowListByUserId(ctx context.Context, in *pb.GetFollowListByUserIdReq) (*pb.GetFollowListByUserIdResp, error) {
	l := logic.NewGetFollowListByUserIdLogic(ctx, s.svcCtx)
	return l.GetFollowListByUserId(in)
}

// 获取粉丝列表
func (s *UserRpcServer) GetFansListByUserId(ctx context.Context, in *pb.GetFansListByUserIdReq) (*pb.GetFansListByUserIdResp, error) {
	l := logic.NewGetFansListByUserIdLogic(ctx, s.svcCtx)
	return l.GetFansListByUserId(in)
}

// 关注
func (s *UserRpcServer) Follow(ctx context.Context, in *pb.FollowReq) (*pb.FollowResp, error) {
	l := logic.NewFollowLogic(ctx, s.svcCtx)
	return l.Follow(in)
}

// 取消关注
func (s *UserRpcServer) UnFollow(ctx context.Context, in *pb.UnFollowReq) (*pb.UnFollowResp, error) {
	l := logic.NewUnFollowLogic(ctx, s.svcCtx)
	return l.UnFollow(in)
}

// 获取好友列表
func (s *UserRpcServer) GetFriendsList(ctx context.Context, in *pb.GetFriendsListReq) (*pb.GetFriendsListResp, error) {
	l := logic.NewGetFriendsListLogic(ctx, s.svcCtx)
	return l.GetFriendsList(in)
}

// --------------------------------chat--------------------------------
func (s *UserRpcServer) SendMessage(ctx context.Context, in *pb.SendMessageReq) (*pb.SendMessageResp, error) {
	l := logic.NewSendMessageLogic(ctx, s.svcCtx)
	return l.SendMessage(in)
}

// 获取历史消息
func (s *UserRpcServer) GetHistoryMessage(ctx context.Context, in *pb.GetHistoryMessageReq) (*pb.GetHistoryMessageResp, error) {
	l := logic.NewGetHistoryMessageLogic(ctx, s.svcCtx)
	return l.GetHistoryMessage(in)
}
