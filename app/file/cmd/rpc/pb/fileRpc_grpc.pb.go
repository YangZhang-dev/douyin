// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: fileRpc.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FileRpcClient is the client API for FileRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileRpcClient interface {
	// 上传视频到OSS
	UploadVideoByOss(ctx context.Context, in *UploadVideoByOssReq, opts ...grpc.CallOption) (*UploadVideoByOssResp, error)
	// 上传视频到本地
	UploadVideoByLocal(ctx context.Context, in *UploadVideoByLocalReq, opts ...grpc.CallOption) (*UploadVideoByLocalResp, error)
}

type fileRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewFileRpcClient(cc grpc.ClientConnInterface) FileRpcClient {
	return &fileRpcClient{cc}
}

func (c *fileRpcClient) UploadVideoByOss(ctx context.Context, in *UploadVideoByOssReq, opts ...grpc.CallOption) (*UploadVideoByOssResp, error) {
	out := new(UploadVideoByOssResp)
	err := c.cc.Invoke(ctx, "/pb.fileRpc/UploadVideoByOss", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileRpcClient) UploadVideoByLocal(ctx context.Context, in *UploadVideoByLocalReq, opts ...grpc.CallOption) (*UploadVideoByLocalResp, error) {
	out := new(UploadVideoByLocalResp)
	err := c.cc.Invoke(ctx, "/pb.fileRpc/UploadVideoByLocal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileRpcServer is the server API for FileRpc service.
// All implementations must embed UnimplementedFileRpcServer
// for forward compatibility
type FileRpcServer interface {
	// 上传视频到OSS
	UploadVideoByOss(context.Context, *UploadVideoByOssReq) (*UploadVideoByOssResp, error)
	// 上传视频到本地
	UploadVideoByLocal(context.Context, *UploadVideoByLocalReq) (*UploadVideoByLocalResp, error)
	mustEmbedUnimplementedFileRpcServer()
}

// UnimplementedFileRpcServer must be embedded to have forward compatible implementations.
type UnimplementedFileRpcServer struct {
}

func (UnimplementedFileRpcServer) UploadVideoByOss(context.Context, *UploadVideoByOssReq) (*UploadVideoByOssResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadVideoByOss not implemented")
}
func (UnimplementedFileRpcServer) UploadVideoByLocal(context.Context, *UploadVideoByLocalReq) (*UploadVideoByLocalResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadVideoByLocal not implemented")
}
func (UnimplementedFileRpcServer) mustEmbedUnimplementedFileRpcServer() {}

// UnsafeFileRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileRpcServer will
// result in compilation errors.
type UnsafeFileRpcServer interface {
	mustEmbedUnimplementedFileRpcServer()
}

func RegisterFileRpcServer(s grpc.ServiceRegistrar, srv FileRpcServer) {
	s.RegisterService(&FileRpc_ServiceDesc, srv)
}

func _FileRpc_UploadVideoByOss_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadVideoByOssReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileRpcServer).UploadVideoByOss(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.fileRpc/UploadVideoByOss",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileRpcServer).UploadVideoByOss(ctx, req.(*UploadVideoByOssReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileRpc_UploadVideoByLocal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadVideoByLocalReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileRpcServer).UploadVideoByLocal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.fileRpc/UploadVideoByLocal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileRpcServer).UploadVideoByLocal(ctx, req.(*UploadVideoByLocalReq))
	}
	return interceptor(ctx, in, info, handler)
}

// FileRpc_ServiceDesc is the grpc.ServiceDesc for FileRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.fileRpc",
	HandlerType: (*FileRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadVideoByOss",
			Handler:    _FileRpc_UploadVideoByOss_Handler,
		},
		{
			MethodName: "UploadVideoByLocal",
			Handler:    _FileRpc_UploadVideoByLocal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fileRpc.proto",
}
